[alias]
	# shows a list of aliases
	alias = config --get-regexp alias
	# Now you can check out a particular merge request from any repository and any remote. For example, to check out the merge request with ID 5 as shown in GitLab from the upstream remote, do:
	# git getmr upstream 5
	getmr = !sh -c 'git fetch $1 merge-requests/$2/head:mr-$1-$2 && git checkout mr-$1-$2' -
    # will add .submodules (config file) and the project file (the submodule itself) 
    # suba https://...git
    suba = submodule add
    # this will add the submodules to the .git/config + clone + checkout them
    subinit = submodule update --init --recursive
    prunetags = !git tag -l | xargs git tag -d && git fetch -t
    amend = commit --amend
    amendf = commit --amend --no-edit
    aap = !git aa && git amendf && git pf
    aaps = !git aa && git amendf && git pfs
    changed = status -sb
    filelog = log -u
    hist = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue) [%an]%Creset' --abbrev-commit --date=relative
    lolfromlasttag = log --graph --decorate --pretty=oneline --abbrev-commit --left-right "$(git tag --sort='-*authordate' | head -n 1)..HEAD"
    lol = log --graph --decorate --pretty=oneline --abbrev-commit --left-right
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all --left-right
    logpush = !git --no-pager log origin/$(git currentbranch)..HEAD --oneline
    logpull = !git --no-pager log HEAD..origin/$(git currentbranch) --oneline
    whatsnew = !git diff origin/$(git currentbranch)...HEAD
    whatscoming = !git diff HEAD...origin/$(git currentbranch)
    shallowclone = clone --single-branch --depth 1
    bl = blame -w -M -C
    p = !git push origin
    pu = !git push origin -u $(git currentbranch)
    pf = push origin --force-with-lease
    puf = !git push origin --force-with-lease -u $(git currentbranch)
    pfs = push origin --force-with-lease -o ci.skip
    pufs = !git push origin --force-with-lease -u $(git currentbranch) -o ci.skip
    pt = push origin --tags
    f = fetch
    ft = fetch --tags
    # remove obsolete local origin/branches + tags and fetched all tags (also converts shallow repo to complete repo)
    fpt = ![ -f .git/shallow ] && (sed -i 's|+refs/heads/master:refs/remotes/origin/master|+refs/heads/*:refs/remotes/origin/*|' .git/config && git fetch --prune --prune-tags --tags --unshallow) || git fetch --prune --prune-tags --tags
    # pull from all subdirectories
    pullalldir = !find . -maxdepth 3 -type f -wholename '*/.git/config' | sed 's$/.git/config$$g' | xargs -P1 -I{} git -C {} pull
    pullalldirr = !find . -type f -wholename '*/.git/config' | sed 's$/.git/config$$g' | xargs -P1 -I{} git -C {} pull
    foreachsubdir = !find . -maxdepth 3 -type f -wholename '*/.git/config' | sed 's$/.git/config$$g' | xargs -P1 -I{} git -C {}
    foreachsubdirr = !find . -type f -wholename '*/.git/config' | sed 's$/.git/config$$g' | xargs -P1 -I{} git -C {}
    s = status -sbu
    st = status
    stp = status --porcelain
    signored = status --ignored
    ci = commit
    br = branch
    # list all branches in verbose mode
    brav = branch -avv
    brv = branch -vv
    branches = branch -rav
    # delete all branches except currentbranch
    brdeleteall = !git branch --color=never | grep -v \"^\\*\" | xargs git branch -D
    # list all the release branches that are not merged on the current branch
    brlistunmergedrel = !git branch -a -v --no-merged $(git currentbranch) | grep rel
    currentbranch = !git branch --color=never | grep \"^\\*\" | cut -d \" \" -f 2
    currentcommit = !echo \"$(git rev-list --max-count=1 HEAD) $(git name-rev --tags --name-only HEAD)\"
    lastref = rev-parse --short HEAD
    lasttag = describe --tags --abbrev=0
    remotes = remote -v show
    undo = reset head~
    unstage = reset HEAD
    co = checkout
    ce = config --edit
    ceg = config --edit --global
    rs = reset
    rsh = reset --hard
    rss = reset --soft
    resetorigin = !git reset --hard origin/$(git currentbranch)
    ro = !git resetorigin
    aa = add --all
    # clean all, including directories
    cleand = clean -fd
    # clean all, even ignored files!
    cleanx = clean -fdx
    pullr = pull --rebase
    ri = rebase -i
    rc = rebase --continue
    ra = rebase --abort
    rebaseversion = !git rebase origin/$(echo \"$(echo \"$(git currentbranch)\" | grep -Po \"v[0-9\\.]+\")/dev\")
    rebaseiversion = !git rebase -i origin/$(echo \"$(echo \"$(git currentbranch)\" | grep -Po \"v[0-9\\.]+\")/dev\")
    rv = !git rebaseversion
    riv = !git rebaseiversion
    mr = merge
    mnf = merge --no-ff
    mrc = merge --continue
    mra = merge --abort
    sp = stash push --include-untracked
    apply-gitignore = !git ls-files -ci --exclude-standard -z | xargs -0 git rm --cached
    # fix warning ignoring broken ref refs/remotes/origin/HEAD
    setremotehead = remote set-head origin
    # usage: git stashu "message" (also stashes untracked files)
    stashu = stash push --include-untracked
    cp = cherry-pick
    # clean re-checkout everything
    cleanrecheckout = !derp=$(git currentbranch) && echo $derp && git co --orphan temp && git rm --cached -r * && git clean -fdx && git br -D $derp && git co $derp
    # Checkout everything with the right end of line
    rcewreol = !git rm --cached -r . && git reset --hard HEAD
    # Normalize eol on repo after setting this file
    normalizeeol = add --renormalize **